# 1 "pfx/pfxLexer.mll"
 
  open PfxParser

  let mk_int nb loc =
    try INT (int_of_string nb)
    with Failure _ -> raise (Location.Error(Printf.sprintf "Illegal integer '%s': " nb,loc))

# 10 "pfx/pfxLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\239\255\000\000\000\000\000\000\000\000\001\000\002\000\
    \000\000\036\000\001\000\253\255\006\000\255\255\001\000\006\000\
    \002\000\250\255\000\000\000\000\000\000\249\255\002\000\243\255\
    \240\255\004\000\000\000\248\255\246\255\004\000\247\255\003\000\
    \001\000\002\000\245\255\244\255\006\000\000\000\242\255\007\000\
    \241\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\004\000\016\000\255\255\001\000\255\255\000\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\015\000\
    \255\255\000\000\255\255\255\255\255\255\000\000\255\255\000\000\
    \000\000\255\255\255\255\000\000\000\000\255\255\000\000\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\000\000\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\013\000\013\000\012\000\014\000\012\000\012\000\
    \255\255\000\000\012\000\255\255\012\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \012\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\010\000\015\000\000\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\008\000\000\000\000\000\005\000\003\000\000\000\002\000\
    \000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
    \004\000\000\000\000\000\007\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\000\000\000\000\
    \000\000\022\000\021\000\038\000\016\000\039\000\017\000\018\000\
    \028\000\029\000\034\000\037\000\027\000\000\000\000\000\031\000\
    \025\000\024\000\023\000\035\000\033\000\032\000\026\000\020\000\
    \036\000\019\000\030\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\014\000\000\000\000\000\000\000\012\000\
    \015\000\255\255\012\000\015\000\012\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\012\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\010\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\000\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\255\255\255\255\
    \255\255\019\000\020\000\037\000\008\000\002\000\016\000\007\000\
    \025\000\005\000\033\000\036\000\026\000\255\255\255\255\004\000\
    \006\000\018\000\022\000\031\000\032\000\004\000\006\000\007\000\
    \003\000\007\000\029\000\039\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\015\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 17 "pfx/pfxLexer.mll"
            ( Location.incr_line lexbuf; token lexbuf )
# 130 "pfx/pfxLexer.ml"

  | 1 ->
# 19 "pfx/pfxLexer.mll"
            ( token lexbuf )
# 135 "pfx/pfxLexer.ml"

  | 2 ->
# 21 "pfx/pfxLexer.mll"
             ( EOF )
# 140 "pfx/pfxLexer.ml"

  | 3 ->
# 23 "pfx/pfxLexer.mll"
                            ( token lexbuf )
# 145 "pfx/pfxLexer.ml"

  | 4 ->
let
# 25 "pfx/pfxLexer.mll"
               nb
# 151 "pfx/pfxLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 25 "pfx/pfxLexer.mll"
                            ( mk_int nb (Location.curr lexbuf))
# 155 "pfx/pfxLexer.ml"

  | 5 ->
# 28 "pfx/pfxLexer.mll"
            ( PLUS )
# 160 "pfx/pfxLexer.ml"

  | 6 ->
# 29 "pfx/pfxLexer.mll"
            ( MINUS )
# 165 "pfx/pfxLexer.ml"

  | 7 ->
# 30 "pfx/pfxLexer.mll"
            ( TIMES )
# 170 "pfx/pfxLexer.ml"

  | 8 ->
# 31 "pfx/pfxLexer.mll"
            ( DIV )
# 175 "pfx/pfxLexer.ml"

  | 9 ->
# 32 "pfx/pfxLexer.mll"
            ( MOD )
# 180 "pfx/pfxLexer.ml"

  | 10 ->
# 33 "pfx/pfxLexer.mll"
            ( PUSH )
# 185 "pfx/pfxLexer.ml"

  | 11 ->
# 34 "pfx/pfxLexer.mll"
            ( POP )
# 190 "pfx/pfxLexer.ml"

  | 12 ->
# 35 "pfx/pfxLexer.mll"
            ( SWAP )
# 195 "pfx/pfxLexer.ml"

  | 13 ->
# 37 "pfx/pfxLexer.mll"
            ( EXEC )
# 200 "pfx/pfxLexer.ml"

  | 14 ->
# 38 "pfx/pfxLexer.mll"
            ( GET )
# 205 "pfx/pfxLexer.ml"

  | 15 ->
# 39 "pfx/pfxLexer.mll"
            ( SEQ )
# 210 "pfx/pfxLexer.ml"

  | 16 ->
let
# 41 "pfx/pfxLexer.mll"
         c
# 216 "pfx/pfxLexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 41 "pfx/pfxLexer.mll"
            (
      raise (Location.Error(Printf.sprintf "Illegal character '%c': " c, Location.curr lexbuf))
    )
# 222 "pfx/pfxLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

